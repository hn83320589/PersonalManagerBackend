name: Personal Manager Backend CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
    
env:
  DOTNET_VERSION: '9.0.x'
  PROJECT_NAME: PersonalManagerAPI
  DOCKERFILE_PATH: ./docker/Dockerfile
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/personalmanager-backend

jobs:
  # =============================================================================
  # Code Quality and Security Analysis
  # =============================================================================
  code-analysis:
    name: 🔍 Code Analysis & Security Scan
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better analysis
    
    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: 📦 Restore dependencies
      run: dotnet restore ./code/${{ env.PROJECT_NAME }}.csproj
    
    - name: 🏗️ Build for analysis
      run: dotnet build ./code/${{ env.PROJECT_NAME }}.csproj --no-restore --configuration Release
    
    # Code Quality Analysis with SonarCloud
    - name: 🔍 SonarCloud Analysis
      if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        args: >
          -Dsonar.projectKey=personal-manager-backend
          -Dsonar.organization=${{ github.repository_owner }}
          -Dsonar.sources=./code
          -Dsonar.exclusions=**/bin/**,**/obj/**,**/*.Tests/**
          -Dsonar.cs.dotcover.reportsPaths=coverage.xml
          -Dsonar.cs.vstest.reportsPaths=TestResults/*.trx
    
    # Security Vulnerability Scanning
    - name: 🛡️ Run CodeQL Analysis
      uses: github/codeql-action/init@v3
      with:
        languages: 'csharp'
        config-file: ./.github/codeql/codeql-config.yml
    
    - name: 🏗️ Autobuild for CodeQL
      uses: github/codeql-action/autobuild@v3
    
    - name: 🔎 Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
    
    # Dependency vulnerability check
    - name: 🔍 Dependency Security Scan
      run: |
        dotnet list ./code/${{ env.PROJECT_NAME }}.csproj package --vulnerable --include-transitive
        dotnet list ./code/${{ env.PROJECT_NAME }}.csproj package --deprecated
    
    - name: 📊 Upload analysis results
      uses: actions/upload-artifact@v4
      with:
        name: analysis-results
        path: |
          coverage.xml
          TestResults/
        retention-days: 30

  # =============================================================================
  # Build and Test Pipeline
  # =============================================================================
  build-and-test:
    name: 🏗️ Build & Test
    runs-on: ubuntu-latest
    needs: code-analysis
    strategy:
      matrix:
        configuration: [Debug, Release]
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
    
    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: 🗃️ Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
    
    - name: 📦 Restore dependencies
      run: dotnet restore ./code/${{ env.PROJECT_NAME }}.csproj
    
    - name: 🏗️ Build application
      run: |
        dotnet build ./code/${{ env.PROJECT_NAME }}.csproj \
          --no-restore \
          --configuration ${{ matrix.configuration }} \
          --verbosity normal
    
    - name: 🧪 Run unit tests
      run: |
        dotnet test ./code/*.Tests/${{ env.PROJECT_NAME }}.Tests.csproj \
          --no-build \
          --configuration ${{ matrix.configuration }} \
          --verbosity normal \
          --logger trx \
          --collect:"XPlat Code Coverage" \
          --results-directory TestResults/
    
    - name: 📊 Generate test report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: 🧪 Test Results (${{ matrix.configuration }})
        path: TestResults/*.trx
        reporter: dotnet-trx
        fail-on-error: true
    
    - name: 📈 Code Coverage Report
      if: matrix.configuration == 'Release'
      uses: codecov/codecov-action@v3
      with:
        file: TestResults/*/coverage.cobertura.xml
        flags: unittests
        name: PersonalManager Backend Coverage
        fail_ci_if_error: false

  # =============================================================================
  # Docker Build and Security Scan
  # =============================================================================
  docker-build:
    name: 🐳 Docker Build & Security Scan
    runs-on: ubuntu-latest
    needs: build-and-test
    permissions:
      contents: read
      packages: write
      security-events: write
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
    
    - name: 🔧 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: 🔐 Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: 📝 Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
        labels: |
          org.opencontainers.image.title=Personal Manager Backend
          org.opencontainers.image.description=Personal Manager Backend API Service
          org.opencontainers.image.vendor=Personal Manager Team
    
    - name: 🏗️ Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ${{ env.DOCKERFILE_PATH }}
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1
    
    # Container Security Scanning
    - name: 🛡️ Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: 📤 Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # =============================================================================
  # Performance Testing
  # =============================================================================
  performance-test:
    name: ⚡ Performance Testing
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/main'
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
    
    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: 🚀 Start application for testing
      run: |
        cd code
        dotnet run --project ${{ env.PROJECT_NAME }}.csproj &
        sleep 30  # Wait for app to start
    
    - name: ⚡ Run performance tests with k6
      uses: grafana/k6-action@v0.3.1
      with:
        filename: tests/performance/api-load-test.js
      env:
        API_BASE_URL: http://localhost:5253
    
    - name: 📊 Upload performance results
      uses: actions/upload-artifact@v4
      with:
        name: performance-results
        path: performance-results.json

  # =============================================================================
  # Integration Testing
  # =============================================================================
  integration-test:
    name: 🔗 Integration Testing
    runs-on: ubuntu-latest
    needs: docker-build
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: personalmanager_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
    
    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: 🗃️ Run database migrations
      run: |
        cd code
        dotnet ef database update --verbose
      env:
        ConnectionStrings__DefaultConnection: "Host=localhost;Database=personalmanager_test;Username=postgres;Password=testpassword"
    
    - name: 🧪 Run integration tests
      run: |
        dotnet test ./code/*.IntegrationTests/ \
          --configuration Release \
          --logger trx \
          --collect:"XPlat Code Coverage" \
          --results-directory IntegrationTestResults/
      env:
        ConnectionStrings__DefaultConnection: "Host=localhost;Database=personalmanager_test;Username=postgres;Password=testpassword"
        ConnectionStrings__Redis: "localhost:6379"
    
    - name: 📊 Upload integration test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: integration-test-results
        path: IntegrationTestResults/

  # =============================================================================
  # Deployment
  # =============================================================================
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-test, docker-build, integration-test]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging-api.personalmanager.dev
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
    
    - name: 🚀 Deploy to Zeabur Staging
      uses: zeabur/deploy-action@v1
      with:
        service-id: ${{ secrets.ZEABUR_STAGING_SERVICE_ID }}
        api-token: ${{ secrets.ZEABUR_API_TOKEN }}
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:develop
    
    - name: 🔍 Health check
      run: |
        curl -f https://staging-api.personalmanager.dev/health || exit 1
    
    - name: 📢 Notify deployment
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  deploy-production:
    name: 🎯 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-test, docker-build, integration-test, performance-test]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://api.personalmanager.dev
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
    
    - name: 🚀 Deploy to Zeabur Production
      uses: zeabur/deploy-action@v1
      with:
        service-id: ${{ secrets.ZEABUR_PRODUCTION_SERVICE_ID }}
        api-token: ${{ secrets.ZEABUR_API_TOKEN }}
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
    
    - name: 🔍 Production health check
      run: |
        curl -f https://api.personalmanager.dev/health || exit 1
    
    - name: 📈 Update deployment metrics
      run: |
        curl -X POST "${{ secrets.MONITORING_WEBHOOK }}" \
          -H "Content-Type: application/json" \
          -d '{
            "service": "personalmanager-backend",
            "version": "${{ github.sha }}",
            "environment": "production",
            "status": "deployed"
          }'
    
    - name: 📢 Notify production deployment
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#production'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow